#pragma once

#include <stdexcept>

#include "uEye.h"
#include "includes.hpp"

#include "error.hpp"

namespace ids
{
	// 
	enum trigger_mode
	{
		// trigger is generated by the driver
		software,

		// trigger is generated by the hardware.
		freerun,

		// trigger is external, from hi to lo.
		hi_lo,
	};

	namespace detail
	{
		// 
		trigger_mode convert_to_trigger(INT trigger)
		{
			switch (trigger)
			{
			case IS_SET_TRIGGER_SOFTWARE: return trigger_mode::software;
			case IS_SET_TRIGGER_HI_LO: return trigger_mode::hi_lo;
			default: throw std::invalid_argument("Invalid argument.");
			}
		}

		// 
		INT convert_to_ids(trigger_mode mode)
		{
			switch (mode)
			{
			case trigger_mode::software: return IS_SET_TRIGGER_SOFTWARE;
			case trigger_mode::hi_lo: return IS_SET_TRIGGER_HI_LO;
			default: throw std::invalid_argument("Invalid argument.");
			}
		}
	}

	// 
	class trigger_mode_property
	{
	public:
		//
		trigger_mode_property(HIDS camera_handle) :
			camera_handle(camera_handle)
		{

		}

		// Gets the current trigger mode.
		trigger_mode get() const
		{
			INT result = is_SetExternalTrigger(
				this->camera_handle,
				IS_GET_EXTERNALTRIGGER);
			return detail::convert_to_trigger(result);
		}

		// Sets the current trigger mode.
		void set(trigger_mode value) const
		{
			INT trigger = detail::convert_to_ids(value);
			INT result = is_SetExternalTrigger(
				this->camera_handle,
				trigger);
			detail::throw_on_error(this->camera_handle, result);
		}

	private:
		const HIDS camera_handle;
	};

	// 
	class trigger_delay_property
	{
	public:
		//
		trigger_delay_property(HIDS camera_handle) :
			camera_handle(camera_handle)
		{

		}

		// Gets the current trigger mode.
		int32_t get() const
		{
			INT result = is_SetTriggerDelay(
				this->camera_handle, 
				IS_GET_TRIGGER_DELAY);
			return static_cast<int32_t>(result);
		}

		// Sets the current trigger mode.
		void set(int32_t value) const
		{
			INT result = is_SetTriggerDelay(
				this->camera_handle,
				static_cast<INT>(value));
			detail::throw_on_error(this->camera_handle, result);
		}
	private:
		const HIDS camera_handle;
	};

	// 
	class trigger_property
	{
	public:
		//
		trigger_property(HIDS camera_handle) :
			camera_handle(camera_handle)
		{

		}

		// Gets or sets the trigger delay.
		trigger_delay_property delay() const
		{
			return trigger_delay_property(this->camera_handle);
		}

		// Gets or sets the trigger mode.
		trigger_mode_property mode() const
		{
			return trigger_mode_property(this->camera_handle);
		}
	private:
		const HIDS camera_handle;
	};
}